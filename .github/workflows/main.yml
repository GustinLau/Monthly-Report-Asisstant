name: Publish
on:
  push:
    tags:
      - 'v*.*.*'
  # 手动触发构建
  workflow_dispatch:

# 设置环境变量
env:
  # 时区（设置时区可使页面中的`最近更新时间`使用时区时间）
  TZ: Asia/Shanghai

jobs:
  build:

    strategy:
      matrix:
        node-version: [ 18.x ]
        os: [ windows-2019 ]

    runs-on: ${{ matrix.os }}

    steps:
      # 检出仓库
      - name: Checkout
        uses: actions/checkout@v3

      # 安装 Node
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # 获取node_modules缓存
      - name: Cache Node-Modules
        id: cache-node-modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ matrix.node-version }}-${{ env.cache-name }}-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-v${{ matrix.node-version }}-${{ env.cache-name }}-

      # 缓存未命中则安装依赖
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      # 运行构建脚本
      - name: Build
        run: npm run electron:windows

      # step5: cleanup artifacts in release
      - name: Cleanup Artifacts
        run: |
          npx rimraf "release/!(*.exe)"

      # step6: upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: release

      # step7: create release
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "release/**"
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN_4_GITHUB  }}